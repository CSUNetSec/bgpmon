syntax = "proto3";

package bgpmond;

service Bgpmond {
	rpc CloseSession(CloseSessionConfig) returns (Empty) {}
	rpc ListModules(Empty) returns (ListModulesResult) {}
	rpc ListSessions(Empty) returns (ListSessionsResult) {}
	rpc RunModule(RunModuleConfig)returns (RunModuleResult) {}
	rpc StartModule(StartModuleConfig) returns (StartModuleResult) {}
	rpc StopModule(StopModuleConfig) returns (Empty) {}
	rpc OpenSession(OpenSessionConfig) returns (OpenSessionResult) {}
}

message Empty {
}

/*
 * Module Messages
 */
enum ModuleType {
	GOBGP_LINK = 0;
	PREFIX_HIJACK = 1;
}

message GoBGPLinkModule {
	string address = 1;
	repeated string out_session_id = 2;
}

message PrefixHijackModule {
	string prefix = 1;
	repeated uint32 as_number = 2;
	uint32 periodic_seconds = 3;
	uint32 timeout_seconds = 4;
	repeated string in_session_id = 5;
}

/*
 * Module Command Messages
 */
message ListModulesResult {
	repeated string module_id = 1;
}

message RunModuleConfig {
	ModuleType type = 1;
	PrefixHijackModule prefix_hijack_module = 2;
}

message RunModuleResult {
	string module_message = 3;
}

message StartModuleConfig {
	ModuleType type = 1;
	GoBGPLinkModule gobgp_link_module = 2;
	PrefixHijackModule prefix_hijack_module = 3;
}

message StartModuleResult {
	string module_id = 3;
}

message StopModuleConfig {
	string module_id = 1;
}

/*
 * Session Messages
 */
enum SessionType {
	CASSANDRA = 0;
	FILE = 1;
}

message CassandraSession {
	string username = 1;
	string password = 2;
	repeated string hosts = 3;
}

message FileSession {
	string filename = 1;
}

/*
 * Session Command Messages 
 */
message CloseSessionConfig {
	string session_id = 1;
}

message ListSessionsResult {
	repeated string session_id = 1;
}

message OpenSessionConfig {
	SessionType type = 1;
	CassandraSession cassandra_session = 2;
	FileSession file_session = 3;
}

message OpenSessionResult {
	string session_id = 3;
}

/*
 * Write Messages
 */
message WriteConfig {
	enum Type {
		AS_NUMBER_LOCATION = 0;
		BGP_UPDATE = 1;
		IP_ADDRESS_LOCATION = 2;
		PREFIX_LOCATION = 3;
	}

	Type type = 1;
	ASNumberLocation as_number_location = 2;
	BGPUpdateMessage bgp_update_message = 3;
	IPAddressLocation ip_address_location = 4;
	PrefixLocation prefix_location = 5;
}

message ASNumberLocation {
	uint32 ASNumber = 1;
	string measure_date = 2;
	Location location = 3;
}

message BGPUpdateMessage {
	
}

message IPAddressLocation {
	string ip_address = 1;
	string measure_date = 2;
	Location location = 3;
}

message Location {
	string country_code = 1;
	string state_code = 2;
	string city = 3;
	double latitude = 4;
	double longitude = 5;
}

message PrefixLocation {
	string prefix_ip_address = 1;
	uint32 prefix_mask = 2;
	string measure_date = 3;
	Location location = 4;
}
