// Code generated by protoc-gen-go.
// source: protobuf/bgpmond.proto
// DO NOT EDIT!

/*
Package bgpmond is a generated protocol buffer package.

It is generated from these files:
	protobuf/bgpmond.proto

It has these top-level messages:
	Empty
	CloseSessionConfig
	CloseSessionResult
	ListModulesResult
	ListSessionsResult
	StartModuleConfig
	GoBGPLinkModule
	PrefixHijackModule
	StartModuleResult
	StopModuleConfig
	StopModuleResult
	OpenSessionConfig
	CassandraSession
	FileSession
	OpenSessionResult
*/
package bgpmond

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StartModuleConfig_Type int32

const (
	StartModuleConfig_GOBGP_LINK    StartModuleConfig_Type = 0
	StartModuleConfig_PREFIX_HIJACK StartModuleConfig_Type = 1
)

var StartModuleConfig_Type_name = map[int32]string{
	0: "GOBGP_LINK",
	1: "PREFIX_HIJACK",
}
var StartModuleConfig_Type_value = map[string]int32{
	"GOBGP_LINK":    0,
	"PREFIX_HIJACK": 1,
}

func (x StartModuleConfig_Type) String() string {
	return proto.EnumName(StartModuleConfig_Type_name, int32(x))
}
func (StartModuleConfig_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type OpenSessionConfig_Type int32

const (
	OpenSessionConfig_CASSANDRA OpenSessionConfig_Type = 0
	OpenSessionConfig_FILE      OpenSessionConfig_Type = 1
)

var OpenSessionConfig_Type_name = map[int32]string{
	0: "CASSANDRA",
	1: "FILE",
}
var OpenSessionConfig_Type_value = map[string]int32{
	"CASSANDRA": 0,
	"FILE":      1,
}

func (x OpenSessionConfig_Type) String() string {
	return proto.EnumName(OpenSessionConfig_Type_name, int32(x))
}
func (OpenSessionConfig_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//
// Close Messages
type CloseSessionConfig struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id" json:"session_id,omitempty"`
}

func (m *CloseSessionConfig) Reset()                    { *m = CloseSessionConfig{} }
func (m *CloseSessionConfig) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionConfig) ProtoMessage()               {}
func (*CloseSessionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CloseSessionResult struct {
	Success      bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
}

func (m *CloseSessionResult) Reset()                    { *m = CloseSessionResult{} }
func (m *CloseSessionResult) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionResult) ProtoMessage()               {}
func (*CloseSessionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

//
// List Messages
type ListModulesResult struct {
	ModuleId []string `protobuf:"bytes,1,rep,name=module_id" json:"module_id,omitempty"`
}

func (m *ListModulesResult) Reset()                    { *m = ListModulesResult{} }
func (m *ListModulesResult) String() string            { return proto.CompactTextString(m) }
func (*ListModulesResult) ProtoMessage()               {}
func (*ListModulesResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListSessionsResult struct {
	SessionId []string `protobuf:"bytes,1,rep,name=session_id" json:"session_id,omitempty"`
}

func (m *ListSessionsResult) Reset()                    { *m = ListSessionsResult{} }
func (m *ListSessionsResult) String() string            { return proto.CompactTextString(m) }
func (*ListSessionsResult) ProtoMessage()               {}
func (*ListSessionsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

//
// Start Messages
type StartModuleConfig struct {
	Type               StartModuleConfig_Type `protobuf:"varint,1,opt,name=type,enum=bgpmond.StartModuleConfig_Type" json:"type,omitempty"`
	GobgpLinkModule    *GoBGPLinkModule       `protobuf:"bytes,2,opt,name=gobgp_link_module" json:"gobgp_link_module,omitempty"`
	PrefixHijackModule *PrefixHijackModule    `protobuf:"bytes,3,opt,name=prefix_hijack_module" json:"prefix_hijack_module,omitempty"`
}

func (m *StartModuleConfig) Reset()                    { *m = StartModuleConfig{} }
func (m *StartModuleConfig) String() string            { return proto.CompactTextString(m) }
func (*StartModuleConfig) ProtoMessage()               {}
func (*StartModuleConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StartModuleConfig) GetGobgpLinkModule() *GoBGPLinkModule {
	if m != nil {
		return m.GobgpLinkModule
	}
	return nil
}

func (m *StartModuleConfig) GetPrefixHijackModule() *PrefixHijackModule {
	if m != nil {
		return m.PrefixHijackModule
	}
	return nil
}

type GoBGPLinkModule struct {
	Address      string   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	OutSessionId []string `protobuf:"bytes,2,rep,name=out_session_id" json:"out_session_id,omitempty"`
}

func (m *GoBGPLinkModule) Reset()                    { *m = GoBGPLinkModule{} }
func (m *GoBGPLinkModule) String() string            { return proto.CompactTextString(m) }
func (*GoBGPLinkModule) ProtoMessage()               {}
func (*GoBGPLinkModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PrefixHijackModule struct {
	Prefix          string   `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	AsNumber        []uint32 `protobuf:"varint,2,rep,name=as_number" json:"as_number,omitempty"`
	PeriodicSeconds uint32   `protobuf:"varint,3,opt,name=periodic_seconds" json:"periodic_seconds,omitempty"`
	TimeoutSeconds  uint32   `protobuf:"varint,4,opt,name=timeout_seconds" json:"timeout_seconds,omitempty"`
	InSessionId     []string `protobuf:"bytes,5,rep,name=in_session_id" json:"in_session_id,omitempty"`
}

func (m *PrefixHijackModule) Reset()                    { *m = PrefixHijackModule{} }
func (m *PrefixHijackModule) String() string            { return proto.CompactTextString(m) }
func (*PrefixHijackModule) ProtoMessage()               {}
func (*PrefixHijackModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StartModuleResult struct {
	Success      bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	ModuleId     string `protobuf:"bytes,3,opt,name=module_id" json:"module_id,omitempty"`
}

func (m *StartModuleResult) Reset()                    { *m = StartModuleResult{} }
func (m *StartModuleResult) String() string            { return proto.CompactTextString(m) }
func (*StartModuleResult) ProtoMessage()               {}
func (*StartModuleResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

//
// Stop Message
type StopModuleConfig struct {
	ModuleId string `protobuf:"bytes,1,opt,name=module_id" json:"module_id,omitempty"`
}

func (m *StopModuleConfig) Reset()                    { *m = StopModuleConfig{} }
func (m *StopModuleConfig) String() string            { return proto.CompactTextString(m) }
func (*StopModuleConfig) ProtoMessage()               {}
func (*StopModuleConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type StopModuleResult struct {
	Success      bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
}

func (m *StopModuleResult) Reset()                    { *m = StopModuleResult{} }
func (m *StopModuleResult) String() string            { return proto.CompactTextString(m) }
func (*StopModuleResult) ProtoMessage()               {}
func (*StopModuleResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

//
// Open Messages
type OpenSessionConfig struct {
	Type             OpenSessionConfig_Type `protobuf:"varint,1,opt,name=type,enum=bgpmond.OpenSessionConfig_Type" json:"type,omitempty"`
	CassandraSession *CassandraSession      `protobuf:"bytes,2,opt,name=cassandra_session" json:"cassandra_session,omitempty"`
	FileSession      *FileSession           `protobuf:"bytes,3,opt,name=file_session" json:"file_session,omitempty"`
}

func (m *OpenSessionConfig) Reset()                    { *m = OpenSessionConfig{} }
func (m *OpenSessionConfig) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionConfig) ProtoMessage()               {}
func (*OpenSessionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OpenSessionConfig) GetCassandraSession() *CassandraSession {
	if m != nil {
		return m.CassandraSession
	}
	return nil
}

func (m *OpenSessionConfig) GetFileSession() *FileSession {
	if m != nil {
		return m.FileSession
	}
	return nil
}

type CassandraSession struct {
	Username string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Hosts    []string `protobuf:"bytes,3,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *CassandraSession) Reset()                    { *m = CassandraSession{} }
func (m *CassandraSession) String() string            { return proto.CompactTextString(m) }
func (*CassandraSession) ProtoMessage()               {}
func (*CassandraSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type FileSession struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *FileSession) Reset()                    { *m = FileSession{} }
func (m *FileSession) String() string            { return proto.CompactTextString(m) }
func (*FileSession) ProtoMessage()               {}
func (*FileSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type OpenSessionResult struct {
	Success      bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	SessionId    string `protobuf:"bytes,3,opt,name=session_id" json:"session_id,omitempty"`
}

func (m *OpenSessionResult) Reset()                    { *m = OpenSessionResult{} }
func (m *OpenSessionResult) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionResult) ProtoMessage()               {}
func (*OpenSessionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func init() {
	proto.RegisterType((*Empty)(nil), "bgpmond.Empty")
	proto.RegisterType((*CloseSessionConfig)(nil), "bgpmond.CloseSessionConfig")
	proto.RegisterType((*CloseSessionResult)(nil), "bgpmond.CloseSessionResult")
	proto.RegisterType((*ListModulesResult)(nil), "bgpmond.ListModulesResult")
	proto.RegisterType((*ListSessionsResult)(nil), "bgpmond.ListSessionsResult")
	proto.RegisterType((*StartModuleConfig)(nil), "bgpmond.StartModuleConfig")
	proto.RegisterType((*GoBGPLinkModule)(nil), "bgpmond.GoBGPLinkModule")
	proto.RegisterType((*PrefixHijackModule)(nil), "bgpmond.PrefixHijackModule")
	proto.RegisterType((*StartModuleResult)(nil), "bgpmond.StartModuleResult")
	proto.RegisterType((*StopModuleConfig)(nil), "bgpmond.StopModuleConfig")
	proto.RegisterType((*StopModuleResult)(nil), "bgpmond.StopModuleResult")
	proto.RegisterType((*OpenSessionConfig)(nil), "bgpmond.OpenSessionConfig")
	proto.RegisterType((*CassandraSession)(nil), "bgpmond.CassandraSession")
	proto.RegisterType((*FileSession)(nil), "bgpmond.FileSession")
	proto.RegisterType((*OpenSessionResult)(nil), "bgpmond.OpenSessionResult")
	proto.RegisterEnum("bgpmond.StartModuleConfig_Type", StartModuleConfig_Type_name, StartModuleConfig_Type_value)
	proto.RegisterEnum("bgpmond.OpenSessionConfig_Type", OpenSessionConfig_Type_name, OpenSessionConfig_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Bgpmond service

type BgpmondClient interface {
	CloseSession(ctx context.Context, in *CloseSessionConfig, opts ...grpc.CallOption) (*CloseSessionResult, error)
	ListModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListModulesResult, error)
	ListSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSessionsResult, error)
	StartModule(ctx context.Context, in *StartModuleConfig, opts ...grpc.CallOption) (*StartModuleResult, error)
	StopModule(ctx context.Context, in *StopModuleConfig, opts ...grpc.CallOption) (*StopModuleResult, error)
	OpenSession(ctx context.Context, in *OpenSessionConfig, opts ...grpc.CallOption) (*OpenSessionResult, error)
}

type bgpmondClient struct {
	cc *grpc.ClientConn
}

func NewBgpmondClient(cc *grpc.ClientConn) BgpmondClient {
	return &bgpmondClient{cc}
}

func (c *bgpmondClient) CloseSession(ctx context.Context, in *CloseSessionConfig, opts ...grpc.CallOption) (*CloseSessionResult, error) {
	out := new(CloseSessionResult)
	err := grpc.Invoke(ctx, "/bgpmond.Bgpmond/CloseSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListModulesResult, error) {
	out := new(ListModulesResult)
	err := grpc.Invoke(ctx, "/bgpmond.Bgpmond/ListModules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSessionsResult, error) {
	out := new(ListSessionsResult)
	err := grpc.Invoke(ctx, "/bgpmond.Bgpmond/ListSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) StartModule(ctx context.Context, in *StartModuleConfig, opts ...grpc.CallOption) (*StartModuleResult, error) {
	out := new(StartModuleResult)
	err := grpc.Invoke(ctx, "/bgpmond.Bgpmond/StartModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) StopModule(ctx context.Context, in *StopModuleConfig, opts ...grpc.CallOption) (*StopModuleResult, error) {
	out := new(StopModuleResult)
	err := grpc.Invoke(ctx, "/bgpmond.Bgpmond/StopModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) OpenSession(ctx context.Context, in *OpenSessionConfig, opts ...grpc.CallOption) (*OpenSessionResult, error) {
	out := new(OpenSessionResult)
	err := grpc.Invoke(ctx, "/bgpmond.Bgpmond/OpenSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bgpmond service

type BgpmondServer interface {
	CloseSession(context.Context, *CloseSessionConfig) (*CloseSessionResult, error)
	ListModules(context.Context, *Empty) (*ListModulesResult, error)
	ListSessions(context.Context, *Empty) (*ListSessionsResult, error)
	StartModule(context.Context, *StartModuleConfig) (*StartModuleResult, error)
	StopModule(context.Context, *StopModuleConfig) (*StopModuleResult, error)
	OpenSession(context.Context, *OpenSessionConfig) (*OpenSessionResult, error)
}

func RegisterBgpmondServer(s *grpc.Server, srv BgpmondServer) {
	s.RegisterService(&_Bgpmond_serviceDesc, srv)
}

func _Bgpmond_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CloseSessionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BgpmondServer).CloseSession(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bgpmond_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BgpmondServer).ListModules(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bgpmond_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BgpmondServer).ListSessions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bgpmond_StartModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartModuleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BgpmondServer).StartModule(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bgpmond_StopModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StopModuleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BgpmondServer).StopModule(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bgpmond_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(OpenSessionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BgpmondServer).OpenSession(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Bgpmond_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bgpmond.Bgpmond",
	HandlerType: (*BgpmondServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseSession",
			Handler:    _Bgpmond_CloseSession_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _Bgpmond_ListModules_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _Bgpmond_ListSessions_Handler,
		},
		{
			MethodName: "StartModule",
			Handler:    _Bgpmond_StartModule_Handler,
		},
		{
			MethodName: "StopModule",
			Handler:    _Bgpmond_StopModule_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _Bgpmond_OpenSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x52, 0xdb, 0x4c,
	0x10, 0xc5, 0xd8, 0x60, 0xbb, 0xfd, 0x3f, 0x45, 0x51, 0x46, 0xd4, 0x57, 0x7c, 0xa5, 0xa4, 0x2a,
	0x61, 0x03, 0x29, 0x58, 0x64, 0x91, 0xca, 0xc2, 0x18, 0x6c, 0x0c, 0xe6, 0x4f, 0xca, 0x22, 0x3b,
	0x45, 0xb6, 0xc6, 0x46, 0x89, 0xa5, 0x51, 0xf4, 0x53, 0x09, 0x37, 0xc8, 0x55, 0x72, 0x8c, 0x5c,
	0x27, 0xa7, 0xc8, 0x68, 0x46, 0x23, 0x8f, 0x2c, 0xb3, 0x63, 0xd9, 0x6f, 0x5e, 0x3f, 0xbd, 0xe9,
	0xe9, 0x6e, 0xc1, 0xae, 0xe7, 0x93, 0x90, 0x4c, 0xa2, 0xd9, 0xf1, 0x64, 0xee, 0x39, 0xc4, 0xb5,
	0x8e, 0x18, 0x80, 0xca, 0x49, 0xa8, 0x96, 0x61, 0xeb, 0xc2, 0xf1, 0xc2, 0x27, 0xf5, 0x14, 0x50,
	0x7f, 0x41, 0x02, 0xac, 0xe3, 0x20, 0xb0, 0x89, 0xdb, 0x27, 0xee, 0xcc, 0x9e, 0xa3, 0xff, 0x00,
	0x02, 0x0e, 0x18, 0xb6, 0xd5, 0x2d, 0xfc, 0x5f, 0x78, 0x5b, 0xd5, 0xaa, 0x09, 0x32, 0xb2, 0x54,
	0x3d, 0x9b, 0xa4, 0xe1, 0x20, 0x5a, 0x84, 0xa8, 0x0b, 0xe5, 0x20, 0x9a, 0x4e, 0x29, 0xc6, 0x32,
	0x2a, 0x9a, 0x08, 0xd1, 0x2b, 0x68, 0x60, 0xdf, 0x27, 0xbe, 0xe1, 0xd0, 0xc8, 0x9c, 0xe3, 0xee,
	0x26, 0x53, 0xac, 0x33, 0xf0, 0x86, 0x63, 0xea, 0x3b, 0xe8, 0x8c, 0xed, 0x20, 0xbc, 0x21, 0x56,
	0xb4, 0xc0, 0x41, 0xa2, 0xb9, 0x0f, 0x55, 0x87, 0x01, 0xdc, 0x47, 0x91, 0x66, 0x55, 0x38, 0x40,
	0x6d, 0x50, 0xef, 0x71, 0x46, 0xe2, 0x42, 0xa4, 0xac, 0x7a, 0x2f, 0x66, 0xbd, 0xff, 0xda, 0x84,
	0x8e, 0x1e, 0x9a, 0x7e, 0xf2, 0xa1, 0xe4, 0xc2, 0xa7, 0x50, 0x0a, 0x9f, 0x3c, 0xcc, 0x8c, 0x37,
	0x4f, 0x0e, 0x8e, 0x44, 0xd9, 0x72, 0xcc, 0xa3, 0x4f, 0x94, 0xa6, 0x31, 0x32, 0x3a, 0x87, 0xce,
	0x9c, 0x50, 0xa6, 0xb1, 0xb0, 0xdd, 0x6f, 0x06, 0xb7, 0xc5, 0xae, 0x56, 0x3b, 0xe9, 0xa6, 0x0a,
	0x43, 0x72, 0x36, 0xbc, 0x1f, 0x53, 0x02, 0x57, 0xd1, 0x5a, 0x2c, 0x65, 0x09, 0xa0, 0x1b, 0xd8,
	0xf1, 0x7c, 0x3c, 0xb3, 0x7f, 0x1a, 0x8f, 0xf6, 0x57, 0x73, 0x9a, 0x0a, 0x15, 0x99, 0xd0, 0x7e,
	0x2a, 0x74, 0xcf, 0x48, 0x97, 0x8c, 0x93, 0x68, 0x21, 0x2f, 0x87, 0xa9, 0x87, 0x50, 0x8a, 0x2d,
	0xa2, 0x26, 0xc0, 0xf0, 0x8e, 0x7e, 0xda, 0x18, 0x8f, 0x6e, 0xaf, 0xdb, 0x1b, 0xa8, 0x03, 0x8d,
	0x7b, 0xed, 0x62, 0x30, 0xfa, 0x6c, 0x5c, 0x8e, 0xae, 0x7a, 0xfd, 0xeb, 0x76, 0x41, 0x7d, 0x80,
	0xd6, 0x8a, 0xbb, 0xf8, 0x0d, 0x4d, 0xcb, 0xf2, 0xc5, 0x1b, 0x56, 0x35, 0x11, 0xa2, 0xd7, 0xd0,
	0x24, 0x51, 0x68, 0x48, 0xa5, 0xdd, 0x64, 0xa5, 0xad, 0x53, 0x54, 0x4f, 0xab, 0xfb, 0xa7, 0x00,
	0x28, 0x6f, 0x14, 0xed, 0xc2, 0x36, 0xb7, 0x9a, 0xa8, 0x26, 0x51, 0xfc, 0xbc, 0x66, 0x60, 0xb8,
	0x91, 0x33, 0xc1, 0x3e, 0xd3, 0x6b, 0x68, 0x15, 0x33, 0xb8, 0x65, 0x31, 0x3a, 0x84, 0xb6, 0x87,
	0x7d, 0x9b, 0x58, 0xf6, 0x94, 0x7e, 0x76, 0x4a, 0x6b, 0x10, 0xb0, 0xa2, 0x34, 0xb4, 0x96, 0xc0,
	0x75, 0x0e, 0xa3, 0x37, 0xd0, 0x0a, 0x6d, 0x07, 0x73, 0x83, 0x9c, 0x59, 0x62, 0xcc, 0x66, 0x02,
	0x0b, 0xa2, 0x0a, 0x0d, 0xdb, 0x95, 0x2f, 0xb1, 0xc5, 0x2e, 0x51, 0xb3, 0xdd, 0xe5, 0x1d, 0x48,
	0xa6, 0x41, 0x5e, 0xa4, 0xb9, 0xb3, 0x7d, 0x5c, 0x64, 0x84, 0x65, 0x1f, 0x1f, 0x43, 0x5b, 0x0f,
	0x89, 0x97, 0x69, 0xc8, 0x95, 0xc6, 0xcf, 0x26, 0x3c, 0xc8, 0x09, 0x2f, 0x33, 0x7d, 0x7f, 0x0b,
	0xd0, 0xb9, 0xf3, 0xb0, 0x9b, 0xdd, 0x03, 0xcf, 0x8d, 0x45, 0x8e, 0x29, 0x8f, 0xc5, 0x00, 0x3a,
	0x53, 0x93, 0xaa, 0xba, 0x96, 0x6f, 0x8a, 0x52, 0x27, 0x63, 0xb1, 0x97, 0x2a, 0xf4, 0x05, 0x43,
	0xec, 0x90, 0xf6, 0x74, 0x05, 0x41, 0xef, 0xa1, 0x3e, 0xb3, 0x69, 0x01, 0x84, 0x04, 0x1f, 0x88,
	0x9d, 0x54, 0x62, 0x40, 0x0f, 0x45, 0x76, 0x6d, 0xb6, 0x0c, 0xd4, 0x83, 0x64, 0x04, 0x1a, 0x50,
	0xed, 0xf7, 0x74, 0xbd, 0x77, 0x7b, 0xae, 0xf5, 0xe8, 0x04, 0x54, 0xa0, 0x34, 0x18, 0x8d, 0x2f,
	0x68, 0xe3, 0x7f, 0x81, 0xf6, 0xea, 0xf7, 0x91, 0x02, 0x95, 0x28, 0xc0, 0xbe, 0x6b, 0x3a, 0x58,
	0xd4, 0x5b, 0xc4, 0xf1, 0x99, 0x47, 0xf9, 0x3f, 0x88, 0x6f, 0x25, 0xc5, 0x4b, 0x63, 0xb4, 0x03,
	0x5b, 0x8f, 0x24, 0x08, 0xe3, 0xd6, 0x8c, 0x3b, 0x89, 0x07, 0x74, 0x0a, 0x6b, 0x92, 0xbd, 0x58,
	0x20, 0x36, 0x28, 0x8b, 0x8b, 0x58, 0xfd, 0x9e, 0x29, 0xfc, 0xcb, 0xb4, 0x5b, 0x76, 0x07, 0x16,
	0x57, 0xf6, 0xf7, 0xc9, 0xef, 0x22, 0x94, 0xcf, 0x78, 0x15, 0xd1, 0x15, 0xd4, 0xe5, 0x5d, 0x8e,
	0x96, 0x0b, 0x27, 0xff, 0x5f, 0x50, 0xd6, 0x1f, 0x72, 0xcf, 0xea, 0x06, 0xfa, 0x00, 0x35, 0x69,
	0x85, 0xa3, 0x66, 0xca, 0x66, 0xff, 0x1a, 0x45, 0x49, 0xe3, 0xdc, 0xa2, 0xa7, 0xc9, 0x1f, 0xa1,
	0x2e, 0x6f, 0xf3, 0x5c, 0xf6, 0x7e, 0x26, 0x3b, 0xbb, 0xf4, 0x69, 0xfa, 0x10, 0x6a, 0xd2, 0xd4,
	0x22, 0xe5, 0xf9, 0x15, 0xae, 0xac, 0x3d, 0x4b, 0x85, 0xce, 0x01, 0x96, 0xc3, 0x85, 0xf6, 0x24,
	0x6e, 0x76, 0x44, 0x95, 0x75, 0x47, 0xb2, 0x1d, 0xe9, 0x55, 0x25, 0x3b, 0xb9, 0xd1, 0x51, 0xd6,
	0x9e, 0x09, 0xa1, 0xc9, 0x36, 0xfb, 0x73, 0x9f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x97,
	0x0a, 0x44, 0xd3, 0x07, 0x00, 0x00,
}
