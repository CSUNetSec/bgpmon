package cmd

import (
	"fmt"
	"io"
	"sync"

	pb "github.com/CSUNetSec/netsec-protobufs/bgpmon/v2"
	"github.com/CSUNetSec/protoparse/fileutil"
	"github.com/CSUNetSec/protoparse/filter"
	swg "github.com/remeh/sizedwaitgroup"
	"github.com/spf13/cobra"
)

var writeCmd = &cobra.Command{
	Use:   "write SESS_ID FILES...",
	Short: "Writes BGP captures from a file(s) to a session.",
	Long:  "Opens a write stream(s) on the provided session and writes <workers> files concurrently. Write generates a report upon completion of the success or failure of individual files",
	Args:  cobra.MinimumNArgs(2),
	Run:   writeFunc,
}

var (
	workerCt   int    // This is the number of files to write concurrently to the session
	filterFile string // The file to read filters from
)

// This struct is used to send results from the writing goroutines to the
// summary goroutine. It contains the file name, the number of messages
// written from that file, and any error generated by writing it.
type writeMRTResult struct {
	fileName string
	msgCt    int
	err      error
}

// The cobra.Command is necessary for cobra, but it isn't used.
func writeFunc(_ *cobra.Command, args []string) {
	sessID := args[0]

	bc, clierr := newBgpmonCli(bgpmondHost, bgpmondPort)
	if clierr != nil {
		fmt.Printf("Error: %s\n", clierr)
		return
	}
	defer bc.close()

	ctx, cancel := getBackgroundCtxWithCancel()
	// First get the session info
	reply, err := bc.cli.GetSessionInfo(ctx, &pb.SessionInfoRequest{SessionId: sessID})

	//This is cancelled immediately to free the resources associated with the
	// session
	cancel()
	if err != nil {
		fmt.Printf("Error getting session info: %s\n", err)
		return
	}

	// If the user specifies a negative amount, or doesn't specify anything,
	// let the server dictate the worker count.
	if workerCt <= 0 {
		workerCt = int(reply.Workers)
		fmt.Printf("Using server worker count: %d\n", workerCt)
	} else if workerCt > int(reply.Workers) {
		fmt.Printf("WARNING: Requested workers is higher than server workers. Some requests may time out.\n")
	}

	var filts []filter.Filter
	if filterFile != "" {
		if filts, err = fileutil.NewFiltersFromFile(filterFile); err != nil {
			fmt.Printf("Error reading filter file: %s\n", err)
			return
		}
	}

	results := make(chan writeMRTResult)
	// This WaitGroup is just necessary for the summary goroutine
	wg := sync.WaitGroup{}
	wg.Add(1)
	go summarizeResults(results, &wg)

	// This is the worker pool for the writers
	workerPool := swg.New(workerCt)
	for _, fileName := range args[1:] {
		workerPool.Add()
		fmt.Printf("Writing %s\n", fileName)

		go func(f string, wp *swg.SizedWaitGroup) {
			ct, err := writeMRTFile(bc, f, sessID, filts)
			results <- writeMRTResult{fileName: f, msgCt: ct, err: err}
			wp.Done()
		}(fileName, &workerPool)
	}

	workerPool.Wait()
	close(results)
	wg.Wait()
}

func summarizeResults(in chan writeMRTResult, wg *sync.WaitGroup) {
	defer wg.Done()

	numWritten := 0
	numFailed := 0

	var failed []writeMRTResult

	for result := range in {
		numWritten++

		if result.err != nil {
			numFailed++
			failed = append(failed, result)
		}
	}

	fmt.Printf("Total completed: %d\n", numWritten)
	fmt.Printf("Total failures: %d\n", numFailed)
	for _, res := range failed {
		fmt.Printf("%s : %s\n", res.fileName, res.err)
	}
}

func writeMRTFile(bc *bgpmonCli, fileName, sessID string, filts []filter.Filter) (int, error) {
	ctx, cancel := getBackgroundCtxWithCancel()
	defer cancel()

	stream, err := bc.cli.Write(ctx)
	if err != nil {
		return 0, err
	}

	mf, err := fileutil.NewMrtFileReader(fileName, filts)
	if err != nil {
		return 0, err
	}
	defer mf.Close()

	parsed := 0
	for mf.Scan() {
		cap, err := mf.GetCapture()
		if err != nil || cap == nil {
			fmt.Printf("Parse error: %s\n", err)
			continue
		}

		parsed++

		writeRequest := &pb.WriteRequest{
			Type:       pb.WriteRequest_BGP_CAPTURE,
			SessionId:  sessID,
			BgpCapture: cap,
		}

		if err := stream.Send(writeRequest); err != nil {
			return 0, err
		}
	}

	if err := mf.Err(); err != nil {
		return parsed, fmt.Errorf("MRT file reader error: %s", err)
	}

	rep, err := stream.CloseAndRecv()
	if rep != nil && rep.Error != "" {
		return parsed, fmt.Errorf("write stream server error: %s", rep.Error)
	} else if err != nil && err != io.EOF {
		return parsed, fmt.Errorf("write stream server error: %s", err)
	}

	return parsed, nil
}

func init() {
	rootCmd.AddCommand(writeCmd)
	writeCmd.PersistentFlags().IntVarP(&workerCt, "workers", "w", 0, "Override the number of workers writing files.")
	writeCmd.PersistentFlags().StringVarP(&filterFile, "filterFile", "f", "", "The file to read filters from.")
}
